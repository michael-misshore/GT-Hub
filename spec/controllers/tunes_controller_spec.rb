require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe TunesController do
  
  include Devise::TestHelpers

  def mock_tune(stubs={})
    @mock_tune ||= mock_model(Tune, stubs).as_null_object
  end
  
  before (:each) do
    @tuner = Factory.create(:tuner)
    sign_in @tuner
  end

  describe "GET index" do
    it "assigns all tunes as @tunes" do
      Tune.stub_chain(:search, :page) { [mock_tune] }
      get :index
      assigns(:tunes).should eq([mock_tune])
    end
  end

  describe "GET show" do
    it "assigns the requested tune as @tune" do
      Tune.stub(:find).with("37") { mock_tune }
      get :show, :id => "37"
      assigns(:tune).should be(mock_tune)
    end
  end

  describe "GET new" do
    it "assigns a new tune as @tune" do
      Tune.stub(:new) { mock_tune }
      get :new
      assigns(:tune).should be(mock_tune)
    end
  end

  describe "GET edit" do
    it "assigns the requested tune as @tune" do
      Tune.stub(:find).with("37") { mock_tune }
      get :edit, :id => "37"
      assigns(:tune).should be(mock_tune)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created tune as @tune" do
        Tune.stub(:new).with({'these' => 'params'}) { mock_tune(:save => true) }
        post :create, :tune => {'these' => 'params'}
        assigns(:tune).should be(mock_tune)
      end

      it "redirects to the created tune" do
        Tune.stub(:new) { mock_tune(:save => true) }
        post :create, :tune => {}
        response.should redirect_to(tune_url(mock_tune))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved tune as @tune" do
        Tune.stub(:new).with({'these' => 'params'}) { mock_tune(:save => false) }
        post :create, :tune => {'these' => 'params'}
        assigns(:tune).should be(mock_tune)
      end

      it "re-renders the 'new' template" do
        Tune.stub(:new) { mock_tune(:save => false) }
        post :create, :tune => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested tune" do
        Tune.stub(:find).with("37") { mock_tune }
        mock_tune.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :tune => {'these' => 'params'}
      end

      it "assigns the requested tune as @tune" do
        Tune.stub(:find) { mock_tune(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:tune).should be(mock_tune)
      end

      it "redirects to the tune" do
        Tune.stub(:find) { mock_tune(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(tune_url(mock_tune))
      end
    end

    describe "with invalid params" do
      it "assigns the tune as @tune" do
        Tune.stub(:find) { mock_tune(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:tune).should be(mock_tune)
      end

      it "re-renders the 'edit' template" do
        Tune.stub(:find) { mock_tune(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested tune" do
      Tune.stub(:find).with("37") { mock_tune }
      mock_tune.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the tunes list" do
      Tune.stub(:find) { mock_tune }
      delete :destroy, :id => "1"
      response.should redirect_to(tunes_url)
    end
  end

end
